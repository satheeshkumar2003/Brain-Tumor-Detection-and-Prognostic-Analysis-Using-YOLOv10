# -*- coding: utf-8 -*-
"""Braintumor_final_(1) (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJG91S1lLcpT1wphGdu4Wb4O-gRyY1uv
"""

!pip install -q git+https://github.com/THU-MIG/yolov10.git

!wget -P -q https://github.com/jameslahm/yolov10/releases/download/v1.0/yolov10n.pt

!pip install -q roboflow

from roboflow import Roboflow
rf = Roboflow(api_key = "abuZpU3ZD8PksoRZjj1B")
project = rf.workspace("brain-mri").project("mri-rskcu")
version = project.version(3)
dataset = version.download("yolov8")

!pip install -U ultralytics

!yolo task=detect mode=train epochs =5 , batch=32 plots=True \
model = '/content/-q/yolov10n.pt' \
data = '/content/MRI-3/data.yaml'
workers=2



!pip uninstall ultralytics -y
!pip install ultralytics --no-deps --upgrade

!pip install ultralytics==8.3.2

pip install numpy==1.26.4

pip install --upgrade --force-reinstall tensorflow

!pip install ultralytics --upgrade
from ultralytics import YOLO

model_path = "/content/runs/detect/train3/weights/best.pt"
model = YOLO(model_path)

results = model.predict(source="/content/MRI-3/valid/images", conf=0.25, save=True)

import glob
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

images = glob.glob("/content/runs/detect/predict4/*.jpg")

images_to_display = images[:29]

fig, axes = plt.subplots(2,5, figsize=(20,10))

for i, ax in enumerate(axes.flat):
  if i < len(images_to_display):
    img = mpimg.imread(images_to_display[i])
    ax.imshow(img)
    ax.axis('off')
  else:
    ax.axis('off')
plt.tight_layout()
plt.show()

result = model.predict(source = "/content/MRI-3/valid/images/Tr-me_0880_jpg.rf.9c8db6c26c3658dc54dcd0e511f6fc95.jpg", imgsz = 640, conf = 0.25)
annotated_img = result[0].plot()
annotated_img[:, :, ::-1]

!pip install gradio

import gradio as gr
import cv2
import numpy as np

def predict(image):
  result = model.predict(source=image, imgsz = 640, conf = 0.25)
  annotated_img = result[0].plot()
  annotated_img = annotated_img[:, :, ::-1]
  return annotated_img

app = gr.Interface(
    fn =predict,
    inputs = gr.Image(type="numpy", label="Upload an image"),
    outputs = gr.Image(type="numpy", label="Detect Brain Tumor"),
    title = "Brain Tumor Detection Using Yolov10",
    description="Upload an image and the yolov10 model will detect and annotated brain tumor"
)

app.launch()

"""OUTPUT"""

import gradio as gr
import cv2
import numpy as np

size_stages = {
    1: (0, 1000),   # Stage 1: Area < 1000 pixels
    2: (1001, 2000),  # Stage 2: 1001 to 2000 pixels
    3: (2001, 3000),  # Stage 3: 2001 to 3000 pixels
    4: (3001, float('inf'))  # Stage 4: Area > 3000 pixels
}

lifespan_estimates = {
    1: "5+ years",  # Stage 1: Area < 1000 pixels
    2: "3-5 years",  # Stage 2: 1001 to 2000 pixels
    3: "1-3 years",  # Stage 3: 2001 to 3000 pixels
    4: "6-12 months"  # Stage 4: Area > 3000 pixels
}

danger_levels = {
    1: "Low",    # Stage 1
    2: "Moderate",  # Stage 2
    3: "High",  # Stage 3
    4: "Very High"  # Stage 4
}

def get_tumor_stage(area):
    for stage, (min_area, max_area) in size_stages.items():
        if min_area <= area <= max_area:
            return stage
    return None
def predict(image):
    result = model.predict(source=image, imgsz=640, conf=0.25)

    annotated_img = result[0].plot()

    boxes = result[0].boxes.xyxy
    stage = "Unknown"
    lifespan = "Lifespan data not available"
    danger_level = "Unknown"
    tumor_size = "Unknown"

    for box in boxes:
        x1, y1, x2, y2 = box
        area = (x2 - x1) * (y2 - y1)  # Calculate area in pixels

        stage = get_tumor_stage(area)
        lifespan = lifespan_estimates.get(stage, "Lifespan data not available")
        danger_level = danger_levels.get(stage, "Danger level not available")
        tumor_size = f"{area:.2f} pixels"
    annotated_img = cv2.resize(annotated_img, (300, 300))

    annotated_img = annotated_img[:, :, ::-1]

    return annotated_img, f"Tumor Size: {tumor_size}", f"Stage: {stage}", f"Estimate Lifespan: {lifespan}", f"Danger Level: {danger_level}"

app = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="numpy", label="Upload an image"),
    outputs=[gr.Image(type="numpy", label="Annotated Image"),
             gr.Textbox(label="Tumor Size (Pixels)"),
             gr.Textbox(label="Stage"),
             gr.Textbox(label="Estimate Lifespan"),
             gr.Textbox(label="Danger Level")],
    title="Brain Tumor Detection Using YOLOv10",
    description="Upload an image, and the YOLOv10 model will detect and annotate the brain tumor, showing its size in pixels, stage, lifespan, and danger level."
)

app.launch()

from ultralytics import YOLO

model = YOLO("/content/runs/detect/train3/weights/best.pt")

metrics = model.val(data="/content/MRI-3/data.yaml", imgsz=640)

results = metrics.results_dict

precision = results['metrics/precision(B)']  # Precision metric
recall = results['metrics/recall(B)']        # Recall metric
mAP_50 = results['metrics/mAP50(B)']         # mAP at IoU threshold 0.50
mAP_50_95 = results['metrics/mAP50-95(B)']   # mAP at IoU threshold 0.50 to 0.95

accuracy = (2 * precision * recall) / (precision + recall)

print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"mAP@0.50: {mAP_50:.4f}")
print(f"mAP@0.50:0.95: {mAP_50_95:.4f}")
print(f"Accuracy: {accuracy:.4f}")